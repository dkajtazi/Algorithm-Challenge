const lib = require("./algorithm");
const Graph = lib.Graph;
const Node = lib.Node;
const Edge = lib.Edge;
const Algorithm = lib.Algorithm;

var graph = new Graph();
graph.addNode(new Node("A"));
graph.addNode(new Node("B"));
graph.addNode(new Node("C"));
graph.addNode(new Node("D"));
graph.addNode(new Node("E"));
graph.addNode(new Node("F"));
graph.addNode(new Node("G"));
graph.addNode(new Node("H"));
graph.addNode(new Node("I"));
graph.addNode(new Node("J"));
graph.addNode(new Node("K"));
graph.addNode(new Node("L"));
graph.addNode(new Node("M"));
graph.addNode(new Node("N"));
graph.addNode(new Node("O"));
graph.addNode(new Node("P"));
graph.addNode(new Node("Q"));
graph.addNode(new Node("R"));
graph.addNode(new Node("S"));
graph.addNode(new Node("T"));
graph.addNode(new Node("U"));
graph.addNode(new Node("V"));
graph.addNode(new Node("W"));
graph.addNode(new Node("X"));
graph.addNode(new Node("Y"));
graph.addNode(new Node("Z"));

graph.addEdge(new Edge("B", "J", 40));
graph.addEdge(new Edge("F", "P", 19));
graph.addEdge(new Edge("E", "K", 42));
graph.addEdge(new Edge("B", "T", 13));
graph.addEdge(new Edge("U", "K", 65));
graph.addEdge(new Edge("X", "B", 52));
graph.addEdge(new Edge("P", "B", 10));
graph.addEdge(new Edge("V", "D", 67));
graph.addEdge(new Edge("Q", "V", 70));
graph.addEdge(new Edge("Z", "T", 99));
graph.addEdge(new Edge("J", "R", 27));
graph.addEdge(new Edge("Q", "H", 85));
graph.addEdge(new Edge("M", "S", 16));
graph.addEdge(new Edge("Y", "X", 45));
graph.addEdge(new Edge("S", "K", 73));
graph.addEdge(new Edge("O", "M", 44));
graph.addEdge(new Edge("V", "T", 33));
graph.addEdge(new Edge("U", "H", 80));
graph.addEdge(new Edge("R", "E", 75));
graph.addEdge(new Edge("J", "W", 52));
graph.addEdge(new Edge("F", "A", 69));
graph.addEdge(new Edge("I", "W", 4));
graph.addEdge(new Edge("Y", "B", 44));
graph.addEdge(new Edge("W", "R", 94));
graph.addEdge(new Edge("J", "Y", 46));
graph.addEdge(new Edge("G", "S", 75));
graph.addEdge(new Edge("Q", "U", 46));
graph.addEdge(new Edge("K", "V", 35));
graph.addEdge(new Edge("A", "F", 38));
graph.addEdge(new Edge("V", "Y", 58));
graph.addEdge(new Edge("I", "O", 85));
graph.addEdge(new Edge("Q", "T", 44));
graph.addEdge(new Edge("U", "S", 7));
graph.addEdge(new Edge("N", "I", 45));
graph.addEdge(new Edge("X", "O", 69));
graph.addEdge(new Edge("N", "P", 78));
graph.addEdge(new Edge("H", "P", 23));
graph.addEdge(new Edge("A", "U", 88));
graph.addEdge(new Edge("O", "R", 79));
graph.addEdge(new Edge("P", "D", 15));
graph.addEdge(new Edge("C", "V", 89));
graph.addEdge(new Edge("T", "X", 52));
graph.addEdge(new Edge("D", "K", 57));
graph.addEdge(new Edge("B", "A", 2));
graph.addEdge(new Edge("P", "E", 12));
graph.addEdge(new Edge("O", "F", 99));
graph.addEdge(new Edge("N", "U", 31));
graph.addEdge(new Edge("M", "U", 66));
graph.addEdge(new Edge("U", "C", 76));
graph.addEdge(new Edge("Q", "C", 95));
graph.addEdge(new Edge("H", "J", 74));
graph.addEdge(new Edge("F", "J", 48));
graph.addEdge(new Edge("G", "K", 67));
graph.addEdge(new Edge("H", "G", 99));
graph.addEdge(new Edge("X", "G", 78));
graph.addEdge(new Edge("U", "D", 41));
graph.addEdge(new Edge("E", "Q", 59));
graph.addEdge(new Edge("Y", "K", 13));
graph.addEdge(new Edge("Y", "N", 5));
graph.addEdge(new Edge("A", "S", 17));
graph.addEdge(new Edge("U", "G", 0));
graph.addEdge(new Edge("C", "Y", 28));
graph.addEdge(new Edge("F", "C", 21));
graph.addEdge(new Edge("D", "G", 44));
graph.addEdge(new Edge("E", "W", 34));
graph.addEdge(new Edge("N", "M", 88));
graph.addEdge(new Edge("V", "W", 8));
graph.addEdge(new Edge("T", "J", 21));
graph.addEdge(new Edge("J", "G", 88));
graph.addEdge(new Edge("F", "U", 53));
graph.addEdge(new Edge("B", "G", 51));
graph.addEdge(new Edge("H", "F", 15));
graph.addEdge(new Edge("B", "Z", 51));
graph.addEdge(new Edge("R", "N", 37));

var algo = new Algorithm(graph, "A");
algo.execute();
graph.print();